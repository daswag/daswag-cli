import * as path from 'path';
import * as assert from 'yeoman-assert';
import {IOptions} from "../../src/generators/model/options.model";
import LoggerUtils from "../../src/utils/logger-utils";

export default class FileTools {

  public static EXPECTED_FILES = {
    client: [
      `template.yaml`,
      `README.md`,
      `Makefile`,
      `.gitignore`,
      `.editorconfig`,
      `scripts/generate-config.js`,
      `angular.json`,
      `browserslist`,
      `karma.conf.js`,
      `package.json`,
      `tsconfig.app.json`,
      `tsconfig.json`,
      `tsconfig.spec.json`,
      `tslint.json`,
      `e2e/tsconfig.json`,
      `e2e/protractor.conf.js`,
      `e2e/src/app.e2e-spec.ts`,
      `e2e/src/app.po.ts`,
      `src/favicon.ico`,
      `src/index.html`,
      `src/main.ts`,
      `src/polyfills.ts`,
      `src/styles.scss`,
      `src/test.ts`,
      `src/environments/dynamic-environment.ts`,
      `src/environments/environment.prod.ts`,
      `src/environments/environment.ts`,
      `src/assets/config/.gitkeep`,
      `src/assets/img/404.jpg`,
      `src/assets/img/oval.svg`,
      `src/assets/scss/global.scss`,
      `src/assets/scss/vendor.scss`,
      `src/app/app.component.html`,
      `src/app/app.component.spec.ts`,
      `src/app/app.component.ts`,
      `src/app/app.init.ts`,
      `src/app/app.module.ts`,
      `src/app/app-routing.module.ts`,
      `src/app/shared/index.ts`,
      `src/app/shared/shared.module.ts`,
      `src/app/shared/routes/content-layout.routes.ts`,
      `src/app/shared/routes/full-layout.routes.ts`,
      `src/app/shared/navbar/navbar.component.ts`,
      `src/app/shared/navbar/navbar.component.html`,
      `src/app/shared/navbar/navbar.component.scss`,
      `src/app/shared/footer/footer.component.ts`,
      `src/app/shared/footer/footer.component.html`,
      `src/app/shared/footer/footer.component.scss`,
      `src/app/shared/directives/index.ts`,
      `src/app/shared/directives/has-any-role.directive.ts`,
      `src/app/shared/directives/is-authenticated.directive.ts`,
      `src/app/pages/content-pages/content-pages.module.ts`,
      `src/app/pages/content-pages/content-pages-routing.module.ts`,
      `src/app/pages/content-pages/error/error-page.component.ts`,
      `src/app/pages/content-pages/error/error-page.component.scss`,
      `src/app/pages/content-pages/error/error-page.component.html`,
      `src/app/pages/full-pages/full-pages.module.ts`,
      `src/app/pages/full-pages/full-pages-routing.module.ts`,
      `src/app/pages/full-pages/home/home-page.component.ts`,
      `src/app/pages/full-pages/home/home-page.component.html`,
      `src/app/layouts/index.ts`,
      `src/app/layouts/full/full-layout.component.ts`,
      `src/app/layouts/full/full-layout.component.scss`,
      `src/app/layouts/full/full-layout.component.html`,
      `src/app/layouts/content/content-layout.component.html`,
      `src/app/layouts/content/content-layout.component.ts`,
      `src/app/core/core.module.ts`,
      `src/app/core/index.ts`,
      `src/app/core/services/logger.service.ts`,
      `src/app/core/services/index.ts`,
      `src/app/core/models/index.ts`,
      `src/app/core/interceptors/auth.interceptor.ts`,
      `src/app/core/interceptors/auth-expired.interceptor.ts`,
      `src/app/core/interceptors/error-handler.interceptor.ts`,
      `src/app/core/interceptors/index.ts`,
      `src/app/core/auth/auth.service.ts`,
      `src/app/core/auth/auth-guard.service.ts`,
      `src/app/core/auth/role-guard.service.ts`,
      `src/app/core/auth/index.ts`,
    ],
    api: [
      `Makefile`,
      `README.md`,
      `sonar-project.properties`,
      `template.yaml`,
      `template-init.yaml`,
      `docs/config/config.properties`,
      `docs/content/overview.adoc`,
      `docs/files/.gitkeep`,
      `docs/images/.gitkeep`,
      `docs/sample-app-api.adoc`,
      `specs/specs.yaml`,
      `VERSION`,
      `tox.ini`,
      `test-requirements.txt`,
      `setup.py`,
      `setup.cfg`,
      `requirements.txt`,
      `dev-requirements.txt`,
      `tests/conftest.py`,
      `tests/__init__.py`,
      `tests/data/create-table.json`,
      `tests/data/data.json`,
      `tests/unit/__init__.py`,
      `tests/unit/handlers/__init__.py`,
      `tests/unit/core/__init__.py`,
      `tests/unit/core/test_logger.py`,
      `tests/unit/core/test_request.py`,
      `tests/unit/core/test_response.py`,
      `tests/unit/core/decorator/__init__.py`,
      `tests/unit/core/decorator/test_api_endpoint.py`,
      `tests/unit/core/decorator/test_api_params.py`,
      `src/__init__.py`,
      `src/main.py`,
      `src/services/__init__.py`,
      `src/schemas/__init__.py`,
      `src/handlers/__init__.py`,
      `src/core/__init__.py`,
      `src/core/config.py`,
      `src/core/logger.py`,
      `src/core/request.py`,
      `src/core/response.py`,
      `src/core/decorator/__init__.py`,
      `src/core/decorator/api_endpoint.py`,
      `src/core/decorator/api_params.py`,
    ],
    userMgmt:[
      `Makefile`,
      `README.md`,
      `template.yaml`,
    ],
    apiEntity: [],
    apiResource: [
      `src/handlers/users/__init__.py`
    ],
    apiMethod: [
      `src/handlers/users/get_all_users.py`
    ],
  };

  public static assertFilesExist(config: IOptions, tempDir: string, destinationDir: string, files: string[]) {
    // Iterate over files
    files.forEach((file: string) => {
      assert.file(path.join(tempDir, destinationDir, file));
    });
  }

  private static logger = LoggerUtils.createLogger('TestUtils');
}
